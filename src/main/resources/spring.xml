<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:context="http://www.springframework.org/schema/context"
xmlns:aop="http://www.springframework.org/schema/aop"
xmlns:tx="http://www.springframework.org/schema/tx"
xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
">
	<!-- Spring的配置文件，这里主要配置和业务逻辑有关的 -->
	<!-- 数据源，事务控制，xxx -->
	<!-- <context:property-placeholder location="classpath:dbconfig.properties"/>
	
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.Con">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
		<property name="driverClass" value="${jdbc.driverClass}"/>
		<property name="user" value="${jdbc.user}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean> -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:config.properties"/>
	</bean>
	
	<context:component-scan base-package="com.lbq">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- <context:annotation-config/> -->
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<property name="initialSize" value="10" />
		<property name="minIdle" value="10" />
		<property name="maxActive" value="50" />
		
		<property name="maxWait" value="60000" />
		
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<property name="minEvictableIdleTimeMillis" value="30000" />
		
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<property name="poolPreparedStatements" value="false" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
		
		<property name="filters" value="wall,stat" />
	</bean>
	<!-- 配置和MyBatis的整合  -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件的位置 -->
		<!-- <property name="configLocation" value="classpath:mybatis.xml"/> -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 指定mybatis,mapper文件的位置 -->
		<property name="mapperLocations" value="classpath:com/lbq/dao/*.xml"/>
	</bean>
	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有dao接口的实现，加入到ioc容器中 -->
		<property name="basePackage" value="com.lbq.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	<!-- 事务控制的配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源 -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 开启基于注解的事务，使用xml配置形式的事务（必要主要的都是使用配置式）
	<aop:config>
		切入点表达式
		<aop:pointcut expression="execution(* com.lbq)" id="txPointcut"/>
		配置事务增强
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	配置事务增强，事务如何切入
	<tx:advice id="txAdvice" transaction-manager="transationManager">
		<tx:attributes>
			所有方法都是事务方法
			<tx:method name="*"/>
			以get开始的所有方法
			<tx:method name="get*" read-only="true"/>
		</tx:attributes>
	</tx:advice> -->
	
	<!-- <bean id="transportClient" class="com.hc.commmon.persistence.TransportClientRepository">
		<property name="clusterNodes" value="127.0.0.1:9300"/>
		<property name="clusterName" value="elasticsearch"/>
	</bean>
	<bean id="transportClientRepository" class="com.hc.common.persistence.TransportClientRepository">
		<constructor-arg ref="transportClient"/>
	</bean> -->
	
	<!-- <bean id="inetSocketAddress" class="java.net.InetSocketAddress">
		<constructor-arg name="hostname" value="localhost"/>
		<constructor-arg name="port" value="9300"/>
	</bean>
	
	<bean id="node" class="org.elasticsearch.common.transport.InetSocketTransportAddress">
		<constructor-arg name="address" ref="inetSocketAddress"/>
	</bean>
	<bean id="settings" class="org.elasticsearch.common.settings.Settings">
		<constructor-arg name="settings">
			<map>
				<entry key="cluster.name" value="elasticsearch"/>
			</map>
		</constructor-arg>
		<constructor-arg name="secureSettings"><null/></constructor-arg>
	</bean>
	<bean id="plugins" class="java.util.ArrayList"/>
	<bean id="transportClient" class="org.elasticsearch.transport.client.PreBuiltTransportClient">
		<constructor-arg name="settings" ref="settings"/>
		<constructor-arg name="plugins" ref="plugins"/>
	</bean> -->
	
	<bean id="transportClient" class="com.lbq.config.MyConfig" factory-method="client"/>
</beans>